#!/bin/bash
set -e

### –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
if (( EUID != 0 )); then
  echo "‚ùó –°–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω –æ—Ç root: sudo bash <(curl ...)"
  exit 1
fi

### –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
echo "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤..."
for pkg in git curl wget openssl; do
  if ! command -v $pkg &>/dev/null; then
    apt-get update && apt-get install -y $pkg
  fi
done

clear
echo "üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ '–ö–æ—Å–º–æ–¥—Ä–æ–º–∞ v3.0' (n8n + Postiz + pgAdmin + Qdrant)"
echo "--------------------------------------------------------------------------------"

### 1. –í–≤–æ–¥ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
read -p "üåê –í–≤–µ–¥–∏—Ç–µ –±–∞–∑–æ–≤—ã–π –¥–æ–º–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: example.com): " BASE_DOMAIN
read -p "üìß –í–≤–µ–¥–∏—Ç–µ email –¥–ª—è Let's Encrypt –∏ –∞–¥–º–∏–Ω–æ–≤: " EMAIL
read -p "üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è Postgres (n8n): " POSTGRES_PASSWORD
read -p "üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è pgAdmin: " PGADMIN_PASSWORD
read -p "üìù –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è Postiz (Enter –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏): " POSTIZ_PASSWORD
if [ -z "$POSTIZ_PASSWORD" ]; then
  POSTIZ_PASSWORD=$(openssl rand -hex 16)
  echo "‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø–∞—Ä–æ–ª—å –¥–ª—è Postiz: $POSTIZ_PASSWORD"
fi
read -p "ü§ñ –í–≤–µ–¥–∏—Ç–µ Telegram Bot Token: " TG_BOT_TOKEN
read -p "üë§ –í–≤–µ–¥–∏—Ç–µ Telegram User ID: " TG_USER_ID
read -p "üóùÔ∏è  –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è n8n (Enter –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏): " N8N_ENCRYPTION_KEY
if [ -z "$N8N_ENCRYPTION_KEY" ]; then
  N8N_ENCRYPTION_KEY=$(openssl rand -hex 32)
  echo "‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: $N8N_ENCRYPTION_KEY"
fi

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Postiz
POSTGRES_POSTIZ_PASSWORD=$(openssl rand -hex 16)

### 2. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –∏ Compose
echo "üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker..."
if ! command -v docker &>/dev/null; then
  curl -fsSL https://get.docker.com | sh
fi
if ! command -v docker-compose &>/dev/null; then
    echo "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º docker-compose..."
    curl -SL https://github.com/docker/compose/releases/download/v2.23.3/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose
    chmod +x /usr/local/bin/docker-compose
    ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose || true
fi


### 3. –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
echo "üì• –ö–ª–æ–Ω–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç..."
rm -rf /opt/content-factory
git clone https://github.com/r0ckerboy/n8n-beget-install /opt/content-factory
cd /opt/content-factory

### 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è .env
cat > ".env" <<EOF
BASE_DOMAIN=$BASE_DOMAIN
EMAIL=$EMAIL

# n8n & pgAdmin
POSTGRES_PASSWORD=$POSTGRES_PASSWORD
PGADMIN_PASSWORD=$PGADMIN_PASSWORD
N8N_ENCRYPTION_KEY=$N8N_ENCRYPTION_KEY

# Postiz
POSTIZ_PASSWORD=$POSTIZ_PASSWORD
POSTGRES_POSTIZ_PASSWORD=$POSTGRES_POSTIZ_PASSWORD

# Telegram
TG_BOT_TOKEN=$TG_BOT_TOKEN
TG_USER_ID=$TG_USER_ID
EOF
chmod 600 .env

### 5. –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
mkdir -p traefik/{acme,logs} postgres-data pgadmin-data qdrant/storage backups data videos
mkdir -p postgres-postiz-data redis-postiz-data postiz-data
touch traefik/acme/acme.json
chmod 600 traefik/acme/acme.json
chown -R 1000:1000 data backups videos

### 6. –ö–æ–Ω—Ñ–∏–≥ Traefik (traefik.yml) - –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
cat > "traefik.yml" <<EOF
global:
  sendAnonymousUsage: false
entryPoints:
  web: { address: ":80", http: { redirections: { entryPoint: { to: websecure, scheme: https } } } }
  websecure: { address: ":443" }
providers:
  docker: { exposedByDefault: false }
  file: { filename: /etc/traefik/dynamic.yml }
certificatesResolvers:
  letsencrypt:
    acme: { email: $EMAIL, storage: /etc/traefik/acme/acme.json, httpChallenge: { entryPoint: web } }
EOF

### 7. –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ñ–∏–≥ Traefik (dynamic.yml) - –î–û–ë–ê–í–õ–ï–ù POSTIZ
cat > "dynamic.yml" <<EOF
http:
  middlewares:
    compress: { compress: true }
    security-headers: { headers: { frameDeny: true, contentTypeNosniff: true, browserXssFilter: true, sslRedirect: true } }
  routers:
    n8n:
      rule: "Host(\`n8n.$BASE_DOMAIN\`)"
      entryPoints: websecure
      tls: { certResolver: letsencrypt }
      service: n8n
      middlewares: [compress, security-headers]
    pgadmin:
      rule: "Host(\`pgadmin.$BASE_DOMAIN\`)"
      entryPoints: websecure
      tls: { certResolver: letsencrypt }
      service: pgadmin
      middlewares: [compress, security-headers]
    qdrant:
      rule: "Host(\`qdrant.$BASE_DOMAIN\`)"
      entryPoints: websecure
      tls: { certResolver: letsencrypt }
      service: qdrant
      middlewares: [compress, security-headers]
    postiz:
      rule: "Host(\`postiz.$BASE_DOMAIN\`)"
      entryPoints: websecure
      tls: { certResolver: letsencrypt }
      service: postiz
      middlewares: [compress, security-headers]
  services:
    n8n: { loadBalancer: { servers: [{ url: "http://n8n:5678" }] } }
    pgadmin: { loadBalancer: { servers: [{ url: "http://pgadmin:80" }] } }
    qdrant: { loadBalancer: { servers: [{ url: "http://qdrant:6333" }] } }
    postiz: { loadBalancer: { servers: [{ url: "http://postiz:8000" }] } }
EOF

### 8. –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π docker-compose.yml - –î–û–ë–ê–í–õ–ï–ù–´ POSTIZ –ò SHORT-VIDEO-MAKER
cat > "docker-compose.yml" <<EOF
services:
  traefik:
    image: traefik:v2.10
    restart: unless-stopped
    ports: ["80:80", "443:443"]
    volumes:
      - ./traefik.yml:/etc/traefik/traefik.yml
      - ./dynamic.yml:/etc/traefik/dynamic.yml
      - ./traefik/acme:/etc/traefik/acme
      - /var/run/docker.sock:/var/run/docker.sock:ro
  n8n:
    image: n8n-custom:latest
    restart: unless-stopped
    environment:
      - N8N_HOST=n8n.$BASE_DOMAIN
      - N8N_PROTOCOL=https
      - N8N_ENCRYPTION_KEY=\${N8N_ENCRYPTION_KEY}
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_USER=postgres
      - DB_POSTGRESDB_PASSWORD=\${POSTGRES_PASSWORD}
    volumes:
      - ./data:/home/node/.n8n
      - ./videos:/videos # –û–±—â–∞—è –ø–∞–ø–∫–∞ –¥–ª—è –≤–∏–¥–µ–æ
    depends_on: { postgres: { condition: service_healthy } }
  postgres:
    image: postgres:13
    restart: unless-stopped
    environment:
      - POSTGRES_PASSWORD=\${POSTGRES_PASSWORD}
      - POSTGRES_DB=n8n
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
  pgadmin:
    image: dpage/pgadmin4
    restart: unless-stopped
    environment:
      - PGADMIN_DEFAULT_EMAIL=\${EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=\${PGADMIN_PASSWORD}
    volumes:
      - ./pgadmin-data:/var/lib/pgadmin
    depends_on:
      - postgres
  qdrant:
    image: qdrant/qdrant
    restart: unless-stopped
    volumes:
      - ./qdrant/storage:/qdrant/storage
  bot:
    build: ./bot
    restart: unless-stopped
    environment:
      - TG_BOT_TOKEN=\${TG_BOT_TOKEN}
      - TG_USER_ID=\${TG_USER_ID}

  # --- –ú–û–î–£–õ–¨ –ü–£–ë–õ–ò–ö–ê–¶–ò–ò ---
  postiz:
    image: valkeya/postiz:latest
    restart: unless-stopped
    environment:
      - APP_URL=https://postiz.$BASE_DOMAIN
      - APP_ENV=production
      - DB_CONNECTION=pgsql
      - DB_HOST=postgres_postiz
      - DB_PORT=5432
      - DB_DATABASE=postiz
      - DB_USERNAME=postiz
      - DB_PASSWORD=\${POSTGRES_POSTIZ_PASSWORD}
      - REDIS_HOST=redis_postiz
      - REDIS_PORT=6379
    volumes:
      - ./postiz-data:/app/storage
    depends_on:
      - postgres_postiz
      - redis_postiz
    command: >
      bash -c "php artisan migrate --force &&
               (php artisan p:user:create --name=admin --email=${EMAIL} --password=${POSTIZ_PASSWORD} --role=Admin || true) &&
               php artisan serve --host=0.0.0.0 --port=8000"

  postgres_postiz:
    image: postgres:13
    restart: unless-stopped
    environment:
      - POSTGRES_USER=postiz
      - POSTGRES_PASSWORD=\${POSTGRES_POSTIZ_PASSWORD}
      - POSTGRES_DB=postiz
    volumes:
      - ./postgres-postiz-data:/var/lib/postgresql/data

  redis_postiz:
    image: redis:7
    restart: unless-stopped
    volumes:
      - ./redis-postiz-data:/data

  # --- –ú–û–î–£–õ–¨ –°–ë–û–†–ö–ò –í–ò–î–ï–û ---
  short-video-maker:
    image: ghcr.io/ouo-app/short-video-maker:latest
    volumes:
      - ./videos:/app/videos
    working_dir: /app/videos
EOF

### 9. –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫
echo "üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã..."
docker build -f Dockerfile.n8n -t n8n-custom:latest .
docker-compose down --remove-orphans || true
docker-compose up -d

echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ (–¥–æ 2 –º–∏–Ω—É—Ç)..."
sleep 15
for i in {1..10}; do
  if [ "$( docker-compose ps | grep -c "running" )" -ge 4 ]; then
    echo "‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã."
    break
  fi
  sleep 10
  echo "‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è ($i/10)..."
done


### 10. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
echo "üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è:"
check_service() {
  local service=$1
  local status=$(docker-compose ps $service | awk 'NR>1' | awk '{print $NF}')
  if [[ "$status" == "running" || "$status" == "healthy" ]]; then
    echo "‚úÖ $service —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ"
  else
    echo "‚ùå $service –∏–º–µ–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã (—Å—Ç–∞—Ç—É—Å: $status)"
    docker-compose logs $service --tail=20
  fi
}
check_service traefik
check_service n8n
check_service postgres
check_service postiz

### 11. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ cron
chmod +x ./backup_n8n.sh
(crontab -l 2>/dev/null; echo "0 2 * * * /opt/content-factory/backup_n8n.sh >> /opt/content-factory/backup.log 2>&1") | crontab -

### 12. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
curl -s -X POST https://api.telegram.org/bot$TG_BOT_TOKEN/sendMessage \
  -d chat_id=$TG_USER_ID \
  -d text="‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!
  ‚Ä¢ n8n: https://n8n.$BASE_DOMAIN
  ‚Ä¢ pgAdmin: https://pgadmin.$BASE_DOMAIN
  ‚Ä¢ Qdrant: https://qdrant.$BASE_DOMAIN
  ‚Ä¢ Postiz: https://postiz.$BASE_DOMAIN"

### 13. –§–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
echo "-----------------------------------------------------------"
echo "üéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:"
echo "  ‚Ä¢ n8n: https://n8n.$BASE_DOMAIN"
echo "  ‚Ä¢ pgAdmin: https://pgadmin.$BASE_DOMAIN"
echo "  ‚Ä¢ Qdrant: https://qdrant.$BASE_DOMAIN"
echo "  ‚Ä¢ Postiz: https://postiz.$BASE_DOMAIN (–ø–∞—Ä–æ–ª—å: $POSTIZ_PASSWORD)"
echo ""
echo "‚ÑπÔ∏è  –î–ª—è –≤—ã–∑–æ–≤–∞ –≤–∏–¥–µ–æ-–º–µ–π–∫–µ—Ä–∞ –∏–∑ n8n (—á–µ—Ä–µ–∑ Execute Command) –∏—Å–ø–æ–ª—å–∑—É–π:"
echo "   docker-compose -f /opt/content-factory/docker-compose.yml run --rm short-video-maker [–∞—Ä–≥—É–º–µ–Ω—Ç—ã]"
echo "-----------------------------------------------------------"
docker-compose ps
